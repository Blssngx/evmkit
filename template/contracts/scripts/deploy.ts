import { ethers } from "hardhat";
import fs from "fs";
import path from "path";
import {
  internalContractAddresses,
  DEV_CHAIN_ID,
  DEV_CHAIN_ID_ENUM_NAME,
  PRODUCTION_CHAIN_ID,
  PRODUCTION_CHAIN_ID_ENUM_NAME,
} from "../../application/const/contractAddresses";

async function main() {
  const contractName = "Greeter";
  const greeterFactory = await ethers.getContractFactory(contractName);
  const greeter = await greeterFactory.deploy("Hello world!");
  await greeter.deployed();

  await writeContractAddressToApp(greeter.address, contractName);

  console.log(`Greeter contract deployed to ${greeter.address}`);
}

// Helper function to automatically update the contract address in the app.
async function writeContractAddressToApp(
  address: string,
  contractName: string
) {
  // Write a file saying hello world to ..\..\application\const\contractAddresses.ts
  const relativePath = "../../application/const/contractAddresses.ts";
  const filePath = path.join(__dirname, relativePath);

  const newContractAddressesObject =
    internalContractAddresses as typeof internalContractAddresses;

  // Update the contractAddresses object with the new contract address for [DEV_CHAIN_ID]
  // @ts-ignore: TODO - fix this
  (newContractAddressesObject as typeof internalContractAddresses)[
    DEV_CHAIN_ID as keyof typeof internalContractAddresses
  ][
    contractName.toLowerCase() as keyof (typeof internalContractAddresses)[typeof DEV_CHAIN_ID]
  ] = address;

  // If there's not a value for this key in the [PRODUCTION_CHAIN_ID] property, add empty string.
  if (
    !(
      contractName.toLowerCase() in
      newContractAddressesObject[
        PRODUCTION_CHAIN_ID as keyof typeof internalContractAddresses
      ]
    )
  ) {
    // @ts-ignore: TODO - fix this
    (newContractAddressesObject as typeof internalContractAddresses)[
      PRODUCTION_CHAIN_ID as keyof typeof internalContractAddresses
    ][
      contractName.toLowerCase() as keyof (typeof internalContractAddresses)[typeof PRODUCTION_CHAIN_ID]
    ] = "";
  }

  // Write the file to the path.
  fs.writeFileSync(
    filePath,
    `// NOTE: This file is automatically generated by the deploy script.
// It is not meant to be edited manually; your changes will be overwritten.
import { ChainId } from "@thirdweb-dev/sdk";
export const IS_DEV_ENV = process.env.NODE_ENV === "development";

// Update these values to match your project setup.
export const DEV_CHAIN_ID = ChainId.${DEV_CHAIN_ID_ENUM_NAME};
export const DEV_CHAIN_ID_ENUM_NAME = "${DEV_CHAIN_ID_ENUM_NAME}";
export const PRODUCTION_CHAIN_ID = ChainId.${PRODUCTION_CHAIN_ID_ENUM_NAME}
export const PRODUCTION_CHAIN_ID_ENUM_NAME = "${PRODUCTION_CHAIN_ID_ENUM_NAME}";

// Constant variable that will be used throughout the app.
// Uses local host network if in development, otherwise uses the production chain ID.
export const BLOCKCHAIN_ID = IS_DEV_ENV ? DEV_CHAIN_ID : PRODUCTION_CHAIN_ID;

${await createFormattedContractsObjectAsString(newContractAddressesObject)}

const contractAddresses = IS_DEV_ENV
  ? internalContractAddresses[DEV_CHAIN_ID]
  : internalContractAddresses[PRODUCTION_CHAIN_ID];

export default contractAddresses;
`
  );
}

async function createFormattedContractsObjectAsString(
  objectToFormat: typeof internalContractAddresses
) {
  const formattedContractsObjectAsString = `export const internalContractAddresses = {
    [DEV_CHAIN_ID]: {
      ${(
        await Promise.all(
          Object.keys(objectToFormat[DEV_CHAIN_ID]).map(async (key) => {
            const importedJson = await import(
              `../artifacts/contracts/${key}.sol/${key}.json`
            );
            return `${key}: {\n        "address": "${
              (objectToFormat as typeof internalContractAddresses)[
                DEV_CHAIN_ID as keyof typeof internalContractAddresses
              ][
                key as keyof (typeof internalContractAddresses)[typeof DEV_CHAIN_ID]
              ]
            }",\n        "abi": ${JSON.stringify(
              importedJson["abi"]
            )}\n      }`;
          })
        )
      ).join(",\n      ")}
    },
    [PRODUCTION_CHAIN_ID]: {
      ${(
        await Promise.all(
          Object.keys(objectToFormat[PRODUCTION_CHAIN_ID]).map(async (key) => {
            const importedJson = await import(
              `../artifacts/contracts/${key}.sol/${key}.json`
            );
            return `${key}: {\n        "address": "${
              (objectToFormat as typeof internalContractAddresses)[
                PRODUCTION_CHAIN_ID as keyof typeof internalContractAddresses
              ][
                key as keyof (typeof internalContractAddresses)[typeof PRODUCTION_CHAIN_ID]
              ].address || "<INSERT PRODUCTION ADDRESS HERE>"
            }", // Once you deploy your smart contract to production (such as Mainnet), add the address manually here.\n        "abi": ${JSON.stringify(
              importedJson["abi"]
            )}\n      }`;
          })
        )
      ).join(",\n      ")}
    },
  };`;

  return formattedContractsObjectAsString;
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
